

Iterable - Interface with a method iterator() that returns iterator.
Topmost collection - Collection interface extends this interface, so every collection is iterable providing iterator method.
This makes them useful to pass as an argument of 'for each' construct. What will happen if you pass something not iterable to 
'for each' construct?

---------------------
Collection Interface
	Operations
		stream(); - returns sequential stream
		parallelStream(); - returns parallel stream
	Queue Interface(1.5) - 
		Operations
			add - Inserts the specified element into this queue if possible, else throw exception.
			offer - Inserts the specified element into this queue if possible. Dosen't throw exception.
			remove - Retrieves and removes the head of this queue if possible, else throw exception..
			poll - Retrieves and removes the head of this queue if possible. Dosen't throw exception. 
			peek - Retrieves, but does not remove, the head of this queue., 
			
			 
		ConcurrentLinkedQueue(extends AbstractQueue)
			 An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.
 			 This queue orders elements FIFO (first-in-first-out).
		BlockingQueue Interface - methods take timeout(long) additionally
					A {@link Queue} that additionally supports operations that wait for
 				 	the queue to become non-empty when retrieving an element, and wait
 				 	for space to become available in the queue when storing an element.
			BlockingDeque
		Deque Interface - suffix first/last to all methods
			BlockingDeque Interface
				LinkedBlockingDeque class. 
					I noticed that when LinkedBlockingDeque was empty, the thread didn't wait. 
					It didn't throw exception either.
			ConcurrentLinkedDeque class extends AbstractCollection implements Deque
				An unbounded concurrent {@linkplain Deque deque} based on linked nodes.
				Concurrent insertion, removal, and access operations execute safely
				across multiple threads.
		
		LinkedList
			

		Transferer - Shared internal API for dual stacks and queues.
			TransferQueue
			TransferStack
	

	
	AbstractCollection(class)
		AbstractList
			ArrayList(List, RandomAccess, Cloneable, Serializable)
				When called remove(), all element shifts left making it contiguous. 
				But not in case of link based Queue(LinkedBlockingDeque, LinkedList)
					because shifting is not required, only link needs to be updated.
				Required in Array-Based Queue (e.g., ArrayDeque, PriorityQueue)
			Vector(List, RandomAccess, Cloneable, Serializable)
				Stack
			AbstractSequentialList
				LinkedList(implements List, Deque, Cloneable, Serializable)
	
Map - doesn't extend Collection
	SortedMap is an interface implemented by TreeMap.

Implementation -
	ArrayLists, Queues, Stacks are generally backed by an array inside. Linked lists are not. 
	Retrival in faster in array based data structure, Addition is faster in linked data strctures.
	HashMap - Key value pair. 
		  During hashmap creation you can optionally provide initialCapacity and loadFactor
		  initialCapacity is bucket size. By default 16.
		  The load factor determines how full the HashMap can get before it needs to resize (rehash). Default 0.75.
		  It is a fraction between 0 and 1. A load factor of 0.75 means that 
			when the map is 75% full, it will resize.
		  Stick to the defaults (16 and 0.75) unless you have specific performance requirements.
		  How is a new element assigned a bucket. 
			First its hash is calculated. 
			Next, hash value is devided by initialCapacity(by default 16)
		  	Elements of same a bucket are stored in the form of Tree.
				(Older version had LinkedList)
		  If you add an element in map whose key is already present in map, 
			the old value will get replaced by new value.
		  Sort a hashMap - TreeMap<String, Integer> sortedMap = new TreeMap<>(hashMap);

	When I implemented, I realized -
	Stack need one index, queue might need two. 
	Stacks are used for DFS(Depth first Search), use case - Pathfinding, exploring all nodes
	Queues are used for BFS(Breadth first search), use case - Shortest path, search in shallow trees
	PriorityQueue implements the Queue. operates based on priority ordering, rather than FIFO.
		Thread safe version is PriorityBlockingQueue.
	Link list, Tree need to have a head node to start.
	Tree traversal - When to terminate? May be count the number of time you visited the head node. 
		For binary tree it is 2.
	Both Arrays and HashMaps are key value but HashMap keys are hashed. 
		Effectiveness on hashing relates to how often collision happens.
	TreeMap - A Red-Black tree based NavigableMap implementation. 
		- The map is sorted according to the natural ordering of its keys, or by a Comparator 
	        - Not synchronized. To synchronize - SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));
	Graphs - have edges. Tree is specialized graph with one direction.
	Binary search tree - efficient for search. Left is less than right.
		Disadvantage - can be unbalanced. Go for red-black tree.
------------------------------------

Collections
       static methods to operate on collection
       sort, reverse, min, max, binarySearch, indexedBinarySearch, iteratorBinarySearch, shuffle,swap
       
---------------------------------

Hashing
	Types linear probe, hasing, double hashing. [https://www.youtube.com/watch?v=4YiQITXu_iM]
	Linear probing  - in case of collision, move one down until you find empty.
		e.x draw result of hashing 3, 56,43,12 into a table if the h(x) = x mod 5 
		solution - if mode is 5, then create and array from 0 to 4 then put the values.	

	Open chaining - in case of collition add a node next at the same level(linked list)
		At the end sort all the linked lists.
		Collision is less than linear probe.

	Quadretic probing - in case of collision move in the series of squares(1,4,8,16...)
	Double hasing - If collision happed, use 2nd hashing formula given

--------------------------------
# You can't remove from list if you're browsing it with "for each" loop. You should use Iterator. 
	Else it will throw - ConcurrentModificationException
# You can't modify a list obtained like this -
		List.of(11,2,33,44,15)
	If you try to sort, you will get exception - UnsupportedOperationException
	Use this instead - 
		List<Integer> list = new ArrayList<>(List.of(11, 2, 33, 44, 15));



	 
