create stream using-
	Stream.of
	IntStream.range(1,2)
	Arrays.streamOf?
	Collection.stream();

stream start - map(accepts a mapper), returns a stream
stream middle - filter(optionally accepts a predicate), returns a stream
	      - sort(optionally accepts a comparator), returns a stream

terminal    -forEach(accepts a consumer)
		consumer interface is functional yet 2 methods how
		1 is main function -accept
		2nd is 'andThen' which is default function, with implementation within the interface so this will not count

		collect -  collector: a supplier, an accumulator, a combiner and a finisher.
		collect(Collectors.toList());

		streamSupplier.get().anyMatch(s -> true);   // ok
		streamSupplier.get().noneMatch(s -> true);  // ok


e.g
        Stream<Integer> stream = collection.stream().sorted();
        stream.map(e -> e).forEach(e -> System.out.println(e));
	--------
	
        Employee employee1 = new Employee("Cshok","Kumar",20, "patna");
        Employee employee2 = new Employee("Bshok","Kumar",40, "patna");
        Employee employee3 = new Employee("Ashok","Kumar",10, "patna");
        Employee employee4 = new Employee("Dshok","Kumar",80, "patna");
        Employee employee5 = new Employee("Eshok","Kumar",50, "patna");

        List<Employee> employeeList = new ArrayList<>();
        employeeList.add(employee1);
        employeeList.add(employee2);
        employeeList.add(employee3);
        employeeList.add(employee4);
        employeeList.add(employee5);
        //////////////////
	
	///////////////////Show employee names whose name starts with A
	employeeList.stream().map(employee -> employee.getfName())
                .filter(employee -> employee.startsWith("A"))
                .forEach(System.out::println);
		
	///////////////////Show employee age whose age is more than 25
	employeeList.stream().map(employee -> employee.getAge())
                .filter(employee -> employee > 25)
                .forEach(System.out::println);
		
	///////////////////Show employee name whose age is more than 25
	employeeList.stream()
              .filter(employee -> employee.getAge() > 25) // note that filter can be called before map.
              .map(employee -> employee.getfName())       //but sorted() can be called before. Throws ClassCastException. Why?
              .forEach(System.out::println);              //forEach takes consumer as an argument
	///////////////////If employee object has 5 fields, you want to display 3 fields only. HOw will you do that?   
        // Print employee details showing name and ssn
        System.out.println("\nName and SSN:");
        employees.stream()
                .map(e -> String.format("Name: %s, SSN: %s", e.name, e.ssn))
                .forEach(System.out::println);
	/////////////////// Return the values to a list rather than just print
	List<String> employeeName =  employeeList.stream()
              .filter(employee -> employee.getAge() > 25)
              .map(employee -> employee.getfName())
              .collect(Collectors.toList());              // collect method takes Collector as an argument. Contrast this to forEach
	
        ///////////////////// Create your own function
	
	class MyFunction implements Function<Integer, Integer>{
	    @Override
	    public Integer apply(Integer integer) {
		return integer * integer;
	    }
	}
	
	//use in main()
	Stream<Integer>  myStream = Stream.of(1,2,3,4,5,6,7,8);
        List<Integer> mySqrList = myStream.map(new MyFunction()).toList();
        System.out.println(mySqrList);
	
	/////////////////////////// apply filter using lambda
	
	List<Integer> myEvenSqrList = myStream.map(new MyFunction())
                .filter(even -> even%2 == 0)
                .toList();
		
	/////////////////////// apply filer using predicate implementation
	
	class MyPredicate implements Predicate<Integer>{

	    @Override
	    public boolean test(Integer integer) {
		return integer%2 == 0 ? true: false;
	    }
	}
	//use in main()
	
	List<Integer> myEvenSqrList = myStream
                .map(new MyFunction())
                .filter(new MyPredicate())
                .toList();
        System.out.println(myEvenSqrList);
	
	////////////////Use of reduce
 	List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        // Reduce to calculate the sum
        int sum = numbers.stream()
                .reduce(0, (a, b) -> a + b);

        System.out.println("Sum of numbers: " + sum);
////////////////////////////////////////////

	
Collector: A Collector is specified by four functions that work together to accumulate entries 
into a mutable result container, and optionally perform a final transform on the result. They are:
	creation of a new result container (supplier())
	incorporating a new data element into a result container (accumulator())
	combining two result containers into one (combiner())
	performing an optional final transform on the container (finisher())
	

// Accumulate names into a List
 List<String> list = people.stream()
   .map(Person::getName)
   .collect(Collectors.toList());

 // Accumulate names into a TreeSet
 Set<String> set = people.stream()
   .map(Person::getName)
   .collect(Collectors.toCollection(TreeSet::new));

 // Convert elements to strings and concatenate them, separated by commas
 String joined = things.stream()
   .map(Object::toString)
   .collect(Collectors.joining(", "));

 // Compute sum of salaries of employee
 int total = employees.stream()
   .collect(Collectors.summingInt(Employee::getSalary));

 // Group employees by department
 Map<Department, List<Employee>> byDept = employees.stream()
   .collect(Collectors.groupingBy(Employee::getDepartment));

 // Compute sum of salaries by department
 Map<Department, Integer> totalByDept = employees.stream()
   .collect(Collectors.groupingBy(Employee::getDepartment,
                                  Collectors.summingInt(Employee::getSalary)));

 // Partition students into passing and failing
 Map<Boolean, List<Student>> passingFailing = students.stream()
   .collect(Collectors.partitioningBy(s -> s.getGrade() >= PASS_THRESHOLD));

-----------------
Function - Takes input, does something , returns output
Consumer - Takes input, does something, doesnt returns output
Supplier - Doesn't take input, does something, returns output.

My thoughts - I can draw analogy to CRUD operation -
Create, Update, Delete are like consumers
Find by id is like function
Find All is like supplier
