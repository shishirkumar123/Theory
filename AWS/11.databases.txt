Amazon RDS (Relational Database Service) for Oracle or SQL Server
==================
Managed Service: AWS RDS offers managed versions of both Oracle and SQL Server, 
taking care of administrative tasks like backups, patching, and scaling.  

Advantages: Automatic failover, automated backups, and maintenance provided by 
AWS, with minimal management from your end.

Limitations: Some customizations are restricted since AWS handles the infrastructure.

2. Amazon EC2 with Oracle or SQL Server Installed
==================================================
Full Control: Running your database on an EC2 instance gives you complete control 
  over the environment, configuration, and operating system.
Licensing: You will need to use your own licenses (BYOL), though you have the 
  freedom to customize the instance entirely.
High Availability: You’ll need to set up and manage backups, replication, and high 
  availability. Using services like EC2 Auto Recovery or Elastic Load Balancing can help manage uptime.
Advantages: Ideal if you need specific customizations that RDS doesn’t allow or if 
  you require full DBA access.

3. Amazon Aurora with PostgreSQL or MySQL Compatibility (For Migration)
===================================================
Alternative to Oracle or SQL Server: Aurora is a high-performance, cost-effective database offered 
  by AWS with full MySQL and PostgreSQL compatibility, designed as a managed, scalable alternative
  to commercial databases.


4.  PostgreSQL or MySQL directly on an EC2 instance in AWS.
===================================================
  Benefits of Using EC2 for PostgreSQL or MySQL
Complete Control: You have unrestricted root access to both the operating system and the database.
Customization: Configure performance settings, enable custom extensions, or use tools that are not 
  supported in managed services.
Flexibility: Adjust the storage, memory, and compute capacity without limitations from a managed platform.

# DynamoDB
=============
Serverless, multiAZ, DAX cluster for read cache, export/import S3.
Fetch data: Query vs Scan  
----------------
Query - Search by primary key, faster
Scan - Search by index, slower(goes through the entire table) 

Export Data: Full export vs Incremental export
Full export: Export the table data in it's current state, or from any specific point up to 35 days ago.
Incremental export: Export any table data that's changed within a specific time period

==================================
# Amazon Quantum Ledger Database (QLDB)  
Immutable, Cryptographically Verifiable Ledger: QLDB keeps a history of all changes made to your data, ensuring a transparent audit trail. Data in QLDB is not editable, making it ideal for scenarios where data integrity and a permanent record are essential.

QLDB vs Blockchain:
Unlike decentralized blockchain solutions, QLDB is centrally managed and designed for applications where you trust a single entity to manage the ledger.

QLDB vs RDBMS:
While relational databases are mutable and suitable for typical transactional workloads, QLDB is optimized for scenarios requiring immutable data with historical tracking. It also handles some queries differently, focusing on the audit trail of data rather than transactional updates.

Use cases
====================
# Use RDS if you need a specific database engine other than MySQL/PostgreSQL, have moderate performance needs, and want a straightforward managed database solution.

# Use Aurora if you need high performance, automatic scaling, or are dealing with large datasets and read-heavy workloads, especially if you’re using MySQL or PostgreSQL.

# What to choose if I have to take daily dump of structured data from some source. Data should be added incrementally?
For a workflow where you’re incrementally adding daily structured data from a source, Amazon RDS or Amazon Aurora could work depending on performance needs, but Amazon Redshift or Amazon S3 with AWS Glue may be better suited for handling daily, incremental data ingestion:
How It Works: Amazon Redshift is optimized for handling large, structured datasets and is ideal for analytics. You could load daily data dumps to Redshift in an incremental manner by creating an ETL process that detects new records.
Pros: Scalable for large datasets, supports complex queries, and optimized for analytical use cases.
Cons: More complex setup if real-time processing or frequent data changes are needed.

# Aurora is typically more expensive than RDS due to these advanced features. However, if you need high 
availability and scalability, Aurora’s architecture may offset these costs by reducing downtime and 
handling high-load scenarios more efficiently.

# Choose RDS for PostgreSQL if you need traditional, cost-effective PostgreSQL capabilities with minimal 
custom requirements and moderate performance and scalability.
For a serverless architecture on AWS, Amazon Aurora is generally the better choice over RDS. 

# Replication
Aurora: Uses distributed, shared storage across multiple Availability Zones (AZs), resulting in faster replication with minimal lag.
Aurora: Supports up to 15 read replicas per cluster , RDS supports 5.
Read replicas in Aurora are fully capable of automatic failover. In RDS it is manual.

================================
