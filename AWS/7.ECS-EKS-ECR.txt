ECS - Elastic container Service - something like K8s
ECS has
    - Control Plane - For scheduling and orchestration
    - Managing Services - Managing the lifecycle of a container
            - EC2 instances having docker(or any container) runtime 
            -ECS Agent for communication with control plane

Q. Can ECS cluster go beyond a region/vpc?
A. No. It can span through multiple subnets	

Cluster, Services, Tasks
==============================
	Cluster - The group of m/c on which the service/tasks will run.
	Task Definition - specify container details, memory, cpu requirement, task placement constraints if any, volumes.
	Tasks - Running instances based on task definition. More than one tasks will require a load balancer.
	Once a code change is made, new image needs to be build, tasks need to be updated manually unless you opted for force update.
	Interestingly, when updates with new versions are deployed, ECS runs them, make them up. 
	Only after successful start, stops old version.

ECS setup options
     -ECS with EC2 - Create EC2 and join them to ECS cluster. 
             In this setup, you have to manage infrastructure yourself. You have to-
                - Manage operating system
                - Docker runtime, ECS Agent
                - check whether enough resources
		- Specify VPC/subnet - existing or new
                Advantage - more control of infrastructure
     -ECS with Fargate  - delegate infrastructure management also to AWS. AWS will do
                - container orchestration
                - Hosting infrastructure management
            You provide containers to fargate. Farget will decide hou much RAM, CPU, other resources will be required.
            So provisioning will be taken care of, on demand. So pay only what you use.
            Compare this with EC2 where you have to pay for having an EC2 irrespective of using or not.
            BUT - you loose control.
=====================================================================================================================

            
---------------------
ECR - Elastic container Registry
     keeps container images
     Advantage - integrate well with AWS services. When new version of image arrives, notify the K8s cluster.

(Compare with Amazon Container Service)

>aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 062286665809.dkr.ecr.us-east-1.amazonaws.com
	- username is AWS for everyone for ecr, password is account id.
	- this command obtains ecr login/pwd
	- pipes it to docker login
	Note:
	- AWS ECR does not support permanent credentials
	- This password is valid for 12 hours
You will get the message: Login Succeeded
	
>aws ecr create-repository --repository-name ns1/my-ecr-01  # (If repo doesn't exist)
>docker build -t my-image-01 .(do it locally (-possibly in your laptop) if not yet)
>docker tag my-image-01:latest 062286665809.dkr.ecr.us-east-1.amazonaws.com/my-ns-01/my-ecr-01:v1
	my-image-01 is the image name, 'latest' is the tag (default if none is specified) in laptop.
	my-ecr-01 is the ecr name in aws, 'v1' is the tag (default if none is specified) in ecr.
	verify using >docker images

>docker push 062286665809.dkr.ecr.us-east-1.amazonaws.com/my-ns-01/my-ecr-01:v1


Verify:
>aws ecr list-images --repository-name ns1/my-ecr-01 

Verify the size:
>docker image inspect 062286665809.dkr.ecr.us-east-1.amazonaws.com/ns1/my-ecr-01:v1

I notice that size of image in my latop was 148MB, but in ECR it is 60MB.

==============================
Cleanup

In your laptop
>docker stop 0b7b5556376a #stop the container
>docker rm 0b7b5556376a   #remove the container
>docker images --no-trunc | grep f194fb1cac90 on unix # get the list of all tags associated
>docker rmi my-repo/my-image:latest #e.g1 - remove them one by one. Or use -f for forceful removal.
>docker rmi 062286665809.dkr.ecr.us-east-1.amazonaws.com/ns1/my-ecr-01:v1# e.g2




------------------------
Understanding ECR Structure
ECR Registry → One per AWS account per region
ECR Repositories → Multiple repositories inside the registry
Docker Images → Multiple images with different tags in each repository
