https://www.youtube.com/watch?v=QFaFIcGhPoM&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3

Setup

1.Download NodeJS and VS Code editor.
Note: Along with NodeJS, npm, chocolatey also gets installed.
Chocolatey is a Windows package manager that helps install, upgrade, and uninstall packages, and more.

2. Build app (Reference: https://github.com/facebook/create-react-app)
	Option 1: using npx
>npx create-react-app my-app (npx is npm package runner. bundled with node.)
Need to install the following packages:
  create-react-app
Ok to proceed? (y)
>cd my-app
>npm start   - it will search for package.json and start the server, open the browser - http://localhost:3000/

	Option 2: using npm
>npm install create-react-app -g
>create-react-app <projectname>	


[npm vs npx - NPM (Node Package Manager) and NPX (Node Package Execute) are both tools for working with JavaScript packages:
    NPM installs packages in a project's directory in a subdirectory called node_modules
    NPX - Executes packages directly without installing them. NPX searches node_modules for a package and runs it. If the 
          package isn't found, it's downloaded and then run.
]

[
  npm start  -> Starts the development server.
  npm stop
  npm run build  ->  Bundles the app into static files for production.
  npm test  -> Starts the test runner.
  npm run eject  ->  Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!
  npm install <lib-name> -> imports a library. e.g npm install axios
]
----------
Code snippet
1. rfce for skeleton with function
2. rce for skeleton with class
3. rconst for constructor
4. rpce for pure component 
----------
Four approaches for event binding
1. Binding in render -                   this.<handler>.bind(this)                          - Performace issue
2. Binding in render using '=>' -        {() => this.<handler>}
3. Binding in class constructor -        this.<handler> = this.<handler>.bind(this)	    - recommended
4. class property as '=>' function	<handler> = () => {...}                             - this is also okay

----------------
Styling react component
1. CSS stylesheet
2. Inline styling
3. CSS Module
4. CSS in JS Library

----------
Why do we need portal(ReactDOM.createPortal)
 Till now we always had the root element as -<div id="root">
     * But this component is not inside root, but at the same level. 
     * Inspect element and verify. See the advantage in below video:
     * https://www.youtube.com/watch?v=HpHLa-5Wdys&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=31

Another use case: having to deal with Parent component css when the child component is a modal, a popup
or a tool tip.
https://www.youtube.com/watch?v=HpHLa-5Wdys&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=31
-------------------
Two ways to manage data within components - props, state
props:Props are used to pass data from a parent component to a child component.
state:  State is a local data storage mechanism within a component that can be modified over time

Key Differences:
Feature			Props				State
Mutability		Immutable (read-only)		Mutable (can change with setState or useState)
Scope			Passed from parent to child	Local to the component
Responsibility		Managed by parent component	Managed by the component itself
Purpose			Share data between components	Handle dynamic, local changes


--------------
Lifecycle methods - related to mounting/unmounting and update
Mounting: This phase happens when a component is created and inserted into the DOM for the first time.
Update: Happens on re rendering


Aspect				Mounting		Updating					Unmounting
When it Happens	component is created,added to the DOM.	props/state change		component is removed from the DOM.
Purpose			Initializes the component 	Updates the DOM.				Cleans up resources.
Lifecycle Methods	constructor, componentDidMount	componentDidUpdate, shouldComponentUpdate	componentWillUnmount

------------------
<React.Fragment> 
	-to avoid addition <div>
	- to use child who is inside <table><tr> of parent
-------------------
PureComponent
PureComponent is an optimized version of Component that automatically implements
shouldComponentUpdate() with a shallow comparison of props and state. If the props
and state haven’t changed (i.e., they’re shallowly equal), the component won’t re-render.
---------------
Memo
React.memo is a higher-order component (HOC) that can be used to optimize functional 
components by memoizing the result and preventing unnecessary re-renders. It works 
similarly to PureComponent but is used in functional components.
	export default React.memo(My29)
React.memo helps optimize performance by preventing a re-render of a functional component if its props haven't changed. It performs a shallow comparison of the component’s props, and if the props remain the same between renders, React will skip the re-render and reuse the last rendered result. This can be beneficial for components that receive the same props frequently.

---------------
Refs
refs are used to directly interact with DOM elements or class components.
Ways to create refs.
1. inputRef (using createRef())(New):
this.inputRef = React.createRef();
2. cbRef(Old):
-----------------

------------------

Progressive Web App(PWA)

---------------
public(folder)
    index.html - main container
    manifest.json - For a Progressive Web App (PWA), the manifest.json defines how your app should appear when installed on a user's device or added to the home screen. It provides properties like the app's name, icon, background color, theme color, and more.
When the app is installed, it appears like a native app, with a proper icon, title, and behavior that matches what you’d expect from a regular mobile or desktop app.

A Progressive Web App (PWA) is a type of web application that aims to deliver a native app-like experience using standard web technologies (HTML, CSS, JavaScript). PWAs combine the best features of both web and mobile applications, offering a fast, reliable, and engaging user experience, regardless of network conditions or device type.

------------------------

Error boundry - React components that catch JavaScript error in their child component tree, log those
errors, and display a fallback UI.

They implements either one or both of te lifecycle methods 
1. getDerivedStateFromError - used to render a fallbackUI after error
2. componentDidCatch - log the error info.
becomes an error boundry

HTTP calls
-------------------
# install the dependency
>npm install axios
verify package.json. It should include axios in dependency section

-----------------
package.json vs package-lock.json
------------------
package.json:
	Defines what you want (e.g., "I want version 4.x.x of Express").
	Allows version ranges (e.g., ^1.2.3, ~1.2.3).
	Meant to be manually edited by developers.
	Only lists direct dependencies.
package-lock.json:
	Defines what you get (e.g., "Express v4.18.2 and all its sub-dependencies").
	Guarantees identical installs across machines.
	Specifies the exact version installed (e.g., 1.2.4).
	Automatically generated and managed by npm.
	Includes full dependency tree with sub-dependencies.

-------------------------------------------
export default explanation -
----------------------------------------------
Simplest Understanding for default export is

Export is ES6's feature which is used to Export a module(file) and use it in some other module(file).
Default Export:
default export is the convention if you want to export only one object(variable, function, class) from the file(module).
There could be only one default export per file, but not restricted to only one export(Named export).
When importing default exported object we can rename it as well.
Export or Named Export:

It is used to export the object(variable, function, class) with the same name.
It is used to export multiple objects from one file.
It cannot be renamed when importing in another file, it must have the same name that was used to export it, but we can create its alias by using as operator.

In React, Vue and many other frameworks the Export is mostly used to export reusable components to make modular based applications.
