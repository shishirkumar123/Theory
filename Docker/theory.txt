Generative AI tool for Docker:
docker init is a new experimental feature introduced by Docker to automatically generate a Dockerfile 
and related config files for a project.
To use it, in the cmd prompt, got to the project that needs to dockerize and enter docker init. 
Tool will guide you from here.
==================================================

Docker architecture
	- client - server architecture
	- Daemon(server) receives the commands from Docker client through CLI or rest API'server
	- Daemon and client can be on same or different host.
	
Play with docker-
	- https://labs.play-with-docker.com/
	
Install docker on ubuntu 16.04
>sudo apt-get install docker.io
>docker version
Warning : docker group grants privileges equivalent to the root - https://docs.docker.com/install/linux/linux-postinstall/. So do the below-
>sudo groupadd docker ... check rest of the solution on website
>docker run busybox echo hello   -- when i run this command, then i run >docker ps, I dont see any container.
				-- Where is the container running if not in my machine?
>docker run -it ubuntu bash(it for interactive)
this will take time, once done we will be inside ubuntu container. run below commands to make this ubuntu container more useful-
>apt-get update
>apt-get install curl
>exit - exits the container
>docker ps
>docker images
Run docker container normal-
>docker run jpetazzo/clock [person'sid/imagename]
now in background-
>docker run -d jpetazzo/clock [-d for daemon]
check logs
>docker logs <container id> [docker logs 1 worked for me]
>docker logs tail -5 <container id>
history of docker container we ran-
>docker ps -a
>docker ps -a -q
kill docker instance
>docker kill - immediate
>docker stop - graceful
>docker start
multiple ways to create new image
>docker commit, docker build, docker import
===========================================================
# Create App
# Commited the App including Dockerfile to git
# Build image
Option 1: Build image yourself
	> docker build -t my-app:1.0
Option 2: Have a jenkins set up so that when you commit app+docker file, jenkins build the image based on the Dockerfile.

Note: Whenever update Dockerfile, rebuild the image

# See List of images
[~]docker images
# Delete an image
[~]docker rmi <image-name>
But first make sure containers of that image is deleted
[~]docker ps -a | grep my-app -> find the container
[~]docker rm <container-name> 

#Go inside container
>/ # docker exec -it <contianer-id> /bin/sh  or /bin/bash          - it for interactive
>/ # ls
>/ # exit
[~]
Q. Can I open a vi editor inside cotainer when /bin/bash or /bin/sh?

# Run container
docker run my-app1.0

# docker pull <image-name>
# docker push <image-name>
# docker tag <image-name>
=========================================================================
ECR - Docker Registry at AWS
ACR - Azure Cloud Registry

========================================================
Q. Lets say I don't have a software say postgres database on my laptop. I use docker image to run it. Does it get installed in my machine? when I stop the docker can i still access postgres database?
A. When you use a **Docker image** to run software like PostgreSQL, it does **not get installed on your machine** in the traditional sense. Here's how it works:

1. **Does it get installed on your machine?**
- No, PostgreSQL is not installed directly on your host system. Instead:
  - Docker pulls a pre-built **PostgreSQL image** from a registry (e.g., Docker Hub).
  - Docker creates a **container** from this image, which is an isolated environment where PostgreSQL runs.
  - The software and dependencies reside inside the container, separate from your laptopâ€™s operating system.

---

2. **Can you access PostgreSQL after stopping the Docker container?**
- **No**, once you stop the Docker container, the PostgreSQL server inside the container stops, and you can't access the database unless:
  - **Data Persistence**: If you set up a **Docker volume** or bind mount, the database data will persist on your host system even after the container stops. You can start the container again to access the data.
  - **Without Data Persistence**: If no volume is configured, any changes or data stored inside the container will be lost when the container is removed.

---

3. **How to Ensure Data Persistence?**
If you want the PostgreSQL database to be accessible after stopping the container:
- Use a **Docker volume** or **bind mount** to store the database data on your host system:
  ```bash
  docker run -d \
      -e POSTGRES_USER=myuser \
      -e POSTGRES_PASSWORD=mypassword \
      -e POSTGRES_DB=mydatabase \
      -v postgres_data:/var/lib/postgresql/data \
      --name my_postgres \
      postgres
  ```
  In this example:
  - `-v postgres_data:/var/lib/postgresql/data` creates a persistent volume named `postgres_data`.
  - The volume ensures that your database data is stored on the host, outside the container.

- If the container stops or is deleted, the volume persists, so you can create a new container and reuse the existing data.

---

4. **What Happens When You Stop the Container?**
- **Stopping the container**: The PostgreSQL server stops, and you lose access to it until the container is started again:
  ```bash
  docker stop my_postgres
  docker start my_postgres
  ```
- **Deleting the container**: If you delete the container without a volume, all data inside it is lost.

---

5. **Summary**
- PostgreSQL is not installed on your host machine; it runs in an isolated Docker container.
- If you stop the container:
  - Without a volume: You lose access to PostgreSQL and its data.
  - With a volume: The data persists, and you can access it by restarting or creating a new container.


